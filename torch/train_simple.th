require 'image'
require 'cunn'
require 'cudnn'
require 'nn';
require 'optim'
require 'torchx';
require 'gnuplot';
npy4th=require 'npy4th';
dump=require 'dump';
require 'data_fish';
visualize=require 'visualize';
require 'csvigo';

local fevalScore = function(x)
    if x ~= parameters then
	    parameters:copy(x)
    end
    
    td:getTrainingData();
    td.training_set.data=td.training_set.data:cuda();
	td.training_set.label=td.training_set.label:cuda();
	local batch_inputs=td.training_set.data;
	local batch_targets=td.training_set.label;
    
    gradParameters:zero()
    local outputs=net:forward(batch_inputs);
    local loss=criterion:forward(outputs,batch_targets);
    local dloss=criterion:backward(outputs,batch_targets);
    net:backward(batch_inputs, dloss)
    
    return loss, gradParameters;
end


function test(params)
	print ('setting_threads');
	torch.setnumthreads(1);

	local net_file=params.model
	if params.limit<0 then
	    params.limit=nil;
	end

	val_data_path= params.test_data_path


	local out_dir_images=params.outDirTest;
	paths.mkdir(out_dir_images);

	local out_file_loss_val=paths.concat(out_dir_images,'loss_final_val.npy');
	local out_file_probs_csv=paths.concat(out_dir_images,'probs_per_file.csv');

	local out_file_log=paths.concat(out_dir_images,'log_test.txt');
	local logger=torch.DiskFile(out_file_log,'w');

	logger:writeString(dump.tostring(params)..'\n');
	cutorch.setDevice(params.gpu);
	logger:writeString(dump.tostring('loading network')..'\n');
	print ('loading network');
	net=torch.load(params.model);
	logger:writeString(dump.tostring('done loading network')..'\n');
	print ('done loading network');
	print (net);

	logger:writeString(dump.tostring('making cuda')..'\n');
	net = net:cuda();
	net:evaluate();

	logger:writeString(dump.tostring('done')..'\n');
	logger:writeString(dump.tostring('loading params')..'\n');
	parameters, gradParameters = net:getParameters()
	logger:writeString(dump.tostring('loading done')..'\n');
	logger:writeString(dump.tostring(optimState)..'\n');
	
	local criterion_weights=npy4th.loadnpy(params.weights_file);
	local criterion=nn.CrossEntropyCriterion(criterion_weights)
	criterion=criterion:cuda();

	local log_layer=nn.SoftMax():cuda();

	local data_params={file_path=val_data_path,
					batch_size=params.batchSize,
					augmentation=false,
					limit=params.limit,
	                input_size={params.inputSize,params.inputSize},
	                crop_size={params.cropSize,params.cropSize}
	                };

	vd=data_fish(data_params);

	local val_losses = {};
	local csv_data={};

	csv_data[1]={'image','ALB','BET','DOL','LAG','NoF','OTHER','SHARK','YFT'};

	for i=1,params.iterations do

		vd:getTrainingData();



		vd.training_set.data=vd.training_set.data:cuda();
		vd.training_set.label=vd.training_set.label:cuda();
		local batch_inputs=vd.training_set.data;
		local batch_targets=vd.training_set.label;

		gradParameters:zero()
		local outputs=net:forward(batch_inputs);
		local loss= criterion:forward(outputs,batch_targets);

		val_losses[#val_losses+1]=loss;
		local probs=log_layer:forward(outputs);
		
		for line_num=1,probs:size(1) do
			if (#csv_data<(#vd.lines_data+1)) then
				local path_im=paths.basename(vd.training_set.input[line_num]);
				local row_curr={path_im};
				for pred_num=1,probs:size(2) do
					local str=string.format("%6.20f",probs[{line_num,pred_num}]);
					row_curr[#row_curr+1]=str;
				end
				csv_data[#csv_data+1]=row_curr;
			end
		end

		disp_str=string.format("minibatches processed: %6s, val loss = %6.6f", i, val_losses[#val_losses])
		logger:writeString(dump.tostring(disp_str)..'\n');
		print(disp_str)
	end

	assert ((#csv_data-1)==#vd.lines_data);
	csvigo.save{data=csv_data,path=out_file_probs_csv}
	    
	val_losses=torch.Tensor(val_losses);
	disp_str=string.format("minibatches processed: all, val loss = %6.6f", torch.mean(val_losses))
	logger:writeString(dump.tostring(disp_str)..'\n');
	print (params.model)
	print(disp_str)

	npy4th.savenpy(out_file_loss_val, val_losses)
end

function main(params) 
    print ('setting_threads');
    torch.setnumthreads(1);
	local data_path=params.data_path;
	local out_dir=params.outDir
    local net_file=params.model
    if params.limit<0 then
    	params.limit=nil;
    end
    local val_data_path;
    if params.testAfter>0 then
    	val_data_path= params.val_data_path
    end

    paths.mkdir(out_dir);
    local out_dir_intermediate=paths.concat(out_dir,'intermediate');
    local out_dir_final=paths.concat(out_dir,'final');
    paths.mkdir(out_dir_intermediate);
    paths.mkdir(out_dir_final);
    
    local out_file_net=paths.concat(out_dir_final,'model_all_final.dat');
    local out_file_loss=paths.concat(out_dir_final,'loss_final.npy');
    local out_file_loss_val=paths.concat(out_dir_final,'loss_final_val.npy');
    
    local out_file_intermediate_pre = paths.concat(out_dir_intermediate,'model_all_');
    local out_file_loss_intermediate_pre = paths.concat(out_dir_intermediate,'loss_all_');

    local out_file_loss_plot=paths.concat(out_dir_intermediate,'loss_all.png');
    local out_file_log=paths.concat(out_dir_intermediate,'log.txt');
    local logger=torch.DiskFile(out_file_log,'w');

    logger:writeString(dump.tostring(params)..'\n');
    print (params);

    cutorch.setDevice(params.gpu);

    local optimState       
    local optimMethod      

	optimMethod = optim.adam
	optimState={learningRate=params.learningRate,
            learningRateDecay=params.learningRateDecay ,
            beta1=params.beta1 ,
            beta2=params.beta2 ,
            epsilon=params.epsilon }


    logger:writeString(dump.tostring('loading network')..'\n');
    print ('loading network');
    net = torch.load(net_file);
    net:remove(#net);
    logger:writeString(dump.tostring('done loading network')..'\n');
    print ('done loading network');
    -- logger:writeString(dump.tostring(net)..'\n');
    print (net);

    logger:writeString(dump.tostring('making cuda')..'\n');
    print ('making cuda');
    net = net:cuda();
    logger:writeString(dump.tostring('done')..'\n');
    print ('done');

    logger:writeString(dump.tostring('loading params')..'\n');
    print ('loading params');
    parameters, gradParameters = net:getParameters()
    logger:writeString(dump.tostring('loading done')..'\n');
    print ('loading done');
    logger:writeString(dump.tostring(optimState)..'\n');
    print (optimState)

    local criterion_weights=npy4th.loadnpy(params.weights_file);
    print (criterion_weights:size());
    print (criterion_weights)
    criterion=nn.CrossEntropyCriterion(criterion_weights)
    criterion=criterion:cuda();

    local data_params={file_path=data_path,
					batch_size=params.batchSize,
					augmentation=params.augmentation,
					limit=params.limit,
                    input_size={params.inputSize,params.inputSize},
                    crop_size={params.cropSize,params.cropSize}
                    };

	td=data_fish(data_params);

    if params.testAfter>0 then
    	data_params.file_path = params.val_data_path;
    	data_params.augmentation=false;
    	vd=data_fish(data_params);
	end
    

    local losses = {};
    local losses_iter = {};

    local val_losses = {};
    local val_losses_iter = {};

    
    local counter=0;
    for i=1,params.iterations do

        if params.decreaseAfter then
            if i%params.decreaseAfter==0 and counter<=1 then
                counter=counter+1;
                params.learningRate=params.learningRate/10;
                optimState.learningRate=params.learningRate;
            end
        end

        local _, minibatch_loss = optimMethod(fevalScore,parameters, optimState)
        losses[#losses + 1] = minibatch_loss[1] -- append the new loss        
        losses_iter[#losses_iter +1] = i;

        if i%params.dispAfter==0 then
        	local disp_str=string.format("lr: %6s, minibatches processed: %6s, loss = %6.6f", optimState.learningRate,i, losses[#losses])
            logger:writeString(dump.tostring(disp_str)..'\n');
            print (disp_str);

            local str_score=''..losses[#losses];
            
            if str_seg=='nan' or str_score=='nan' then
                logger:writeString(dump.tostring('QUITTING')..'\n');
                print('QUITTING');
                break;
            end

            

        end


        if i%params.testAfter==0 and params.testAfter>0 then 
            net:evaluate();
            vd:getTrainingData();

            vd.training_set.data=vd.training_set.data:cuda();
			vd.training_set.label=vd.training_set.label:cuda();
			local batch_inputs=vd.training_set.data;
			local batch_targets=vd.training_set.label;
		    
		    gradParameters:zero()
		    local outputs=net:forward(batch_inputs);
		    local loss= criterion:forward(outputs,batch_targets);
		    
            val_losses[#val_losses+1]=loss;
            val_losses_iter[#val_losses_iter+1]=i;

            net:training();
            disp_str=string.format("minibatches processed: %6s, val loss = %6.6f", i, val_losses[#val_losses])
            logger:writeString(dump.tostring(disp_str)..'\n');
            print(disp_str)
        end

        -- check if model needs to be saved. save it.
        -- also save losses
        if i%params.saveAfter==0 then
            local out_file_intermediate=out_file_intermediate_pre..i..'.dat';
            net:clearState();
            torch.save(out_file_intermediate,net);
            local out_file_loss_intermediate=out_file_loss_intermediate_pre..i..'.npy';
            npy4th.savenpy(out_file_loss_intermediate, torch.Tensor(losses))
            
            if params.testAfter>0 then 
                local out_file_loss_intermediate=out_file_loss_intermediate_pre..i..'_val.npy';
                npy4th.savenpy(out_file_loss_intermediate, torch.Tensor(val_losses))
            end
        end

        if i%params.dispPlotAfter==0 then
            visualize:plotLossFigure(losses,losses_iter,val_losses,val_losses_iter,out_file_loss_plot);
        end

	end

    -- save final model
    net:clearState();
    torch.save(out_file_net,net);
    npy4th.savenpy(out_file_loss, torch.Tensor(losses))
    
    if params.testAfter>0 and #val_losses>0 then
        npy4th.savenpy(out_file_loss_val, torch.Tensor(val_losses))
    end
    visualize:plotLossFigure(losses,losses_iter,val_losses,val_losses_iter,out_file_loss_plot);
end


cmd = torch.CmdLine()
cmd:text()
cmd:text('Train Fish network')
cmd:text()
cmd:text('Options')

local epoch_size=53;

cmd:option('-model','../models/alexnet_classifier_lastScratch_untrained.dat');
cmd:option('-weights_file','../data/train_weights.npy');

cmd:option('-inputSize',224,'size of input image');
cmd:option('-cropSize',224,'size of input image');
cmd:option('-bgr',true,'true when using caffe weights');

cmd:option('-limit',-1,'num of training data to read');
cmd:option('-iterations',150*epoch_size,'num of iterations to run');
cmd:option('-saveAfter',30*epoch_size,'num of iterations after which to save model');
cmd:option('-batchSize',64,'batch size');
cmd:option('-testAfter',30,'num iterations after which to get validation loss');
cmd:option('-dispAfter',1,'num iterations after which to display training loss');
cmd:option('-dispPlotAfter',30,'num iterations after which to display training loss');

cmd:option('-val_data_path','../data/val_256.txt')
cmd:option('-data_path','../data/train_256.txt')

cmd:option('learningRate', 1e-3)
cmd:option('learningRateDecay',5e-6)
cmd:option('beta1', 0.9)
cmd:option('beta2', 0.999)
cmd:option('epsilon', 1e-8)
cmd:option('augmentation' , true);

cmd:option('decreaseAfter',50*epoch_size);
cmd:option('-gpu',1,'gpu to run the training on');
cmd:text()

cmd:option('-outDir','/home/SSD3/maheen-data/fish_experiments/train_alexnet/150_50_1e-3');
params = cmd:parse(arg)
-- main(params);

cmd:option('-iterations',10,'num of iterations to run');
cmd:option('-batchSize',100,'batch size');
cmd:option('-outDirTest',paths.concat(params.outDir,'test_images'));
cmd:option('-test_data_path','../data/test_256.txt')
cmd:option('-model',paths.concat(params.outDir,'final/model_all_final.dat'));
params = cmd:parse(arg)
test(params);